;; Sin acabar, implementar como una lista DOBLEMENTE enlazada
(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (make-deque)
  (cons '() '()))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-queue? queue)
    (error "FRONT called with an empty deque" deque)
    (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-queue? queue)
    (error "REAR called with an empty deque" deque)
    (car (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-item (cons item '())))
    (cond ((empty-deque? deque) (set-front-ptr! new-item)
                                (set-rear-ptr! new-item))
          (else (set-cdr! new-item (front-ptr deque))
                (set-front-ptr! new-item)))))
(define (rear-insert-deque! deque item)
  (let ((new-item (cons item '())))
    (cond ((empty-deque? deque) (set-front-ptr! new-item)
                                (set-rear-ptr! new-item))
          (else (set-cdr! (rear-ptr deque) new-item)
                (set-rear-ptr! new-item)))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque) (error "FRONT-DELETE! called with an empty deque" deque))
        ((eq? front-ptr rear-ptr) (set-front-ptr! '()) (set-rear-ptr! '()))
        (else (set-front-ptr! (cdr front-ptr)))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque) (error "REAR-DELETE! called with an empty deque" deque))
        ((eq? front-ptr rear-ptr) (set-front-ptr! '()) (set-rear-ptr! '()))
        (else (set-front-ptr! (cdr front-ptr)))))
