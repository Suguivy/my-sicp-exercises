(define (make-tree entry left right) (cons entry (cons left right)))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (cddr tree))
(define (set-entry! tree branch) (set-car! tree entry))
(define (set-left-branch! tree branch) (set-car! (cdr tree) branch))
(define (set-right-branch! tree branch) (set-cdr! (cdr tree) branch))

(define (make-entry key value) (cons key value))
(define (key-entry entry) (car entry))
(define (value-entry entry) (cdr entry))
(define (set-key-entry! entry key) (set-car! entry key))
(define (set-value-entry! entry value) (set-cdr! entry value))
(define (make-table)
  (list '*table*))

(define (insert! key value table)
  (define (insert-tree! tree)
    (cond ((< key (key-entry (entry tree))) (if (null? (left-branch tree))
                                                (set-left-branch! tree (make-tree (make-entry key value) '() '()))
                                                (insert-tree! (left-branch tree))))
          ((> key (key-entry (entry tree))) (if (null? (right-branch tree))
                                                (set-right-branch! tree (make-tree (make-entry key value) '() '()))
                                                (insert-tree! (right-branch tree))))
          (else (set-value-entry! (entry tree) value))))
  (if (null? (cdr table))
      (set-cdr! table (make-tree (make-entry key value) '() '()))
      (insert-tree! (cdr table)))

(define (lookup key table)
  (define (lookup-tree tree)
    (cond ((null? tree) #f)
          ((< key (key-entry (entry tree))) (lookup-tree (left-branch tree)))
          ((> key (key-entry (entry tree))) (lookup-tree (right-branch tree)))
          (else (value-entry (entry tree)))))
  (lookup-tree (cdr table)))
