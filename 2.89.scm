(define (adjoin-term term term-list)
  (let ((term-order (order term))
        (first-term-order (order (first-term term-list))))
    (cond ((=zero? (coeff term)) term-list)
          ((> term-order first-term-order) (adjoin-term term (cons 0 term-list)))
          ((< term-order first-term-order) (cons (car term-list)
                                               (adjoin-term term (cdr term-list))))
          (else (cons (+ (coeff term) (car term-list)) (cdr term-list))))))
(define (the-empty-termlist) '())
(define (first-term term-list) (make-term (car term-list)
                                          (- (length term-list) 1)))
(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist? term-list) (null? term-list))
(define (make-term order coeff)
  (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))
